<?php
declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\LayeredNavigation\Block\Navigation;

// phpcs:disable Generic.Files.LineLength.TooLong

/** @var $block Navigation */
/** @var $escaper Escaper */
?>
<?php if ($block->canShowBlock()): ?>
    <div class="block" x-data="{isLayeredNavigationOpened: false}" @set-layered-navigation.window="isLayeredNavigationOpened = $event.detail">
        <div class="filter overflow-y-auto fixed top-0 w-full h-full left-0 z-50 bg-white p-5 md:p-0 md:!block md:overflow-visible md:relative md:z-0" x-cloak x-show="isLayeredNavigationOpened" x-transition:enter="transition-opacity ease-linear duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-linear duration-300" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0">
            <div class="block-title flex justify-between items-start filter-title">
                <h2 class="text-lg font-semibold mb-5"><?= $escaper->escapeHtml(__('Shop By')) ?></h2>
                <button type="button" class="inline-block text-gray-400 md:hidden" @click="isLayeredNavigationOpened=false">
                    <span class="sr-only"><?= $escaper->escapeHtml(__('Close menu')) ?></span>
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="block-content filter-content space-y-4">
                <?= $block->getChildHtml('state') ?>
                <?php if ($block->getLayer()->getState()->getFilters()): ?>
                    <div class="block-actions filter-actions">
                         <a href="<?= $escaper->escapeUrl($block->getClearUrl()) ?>" class="action clear filter-clear cursor-pointer text-xs underline text-red-600"><span><?= $escaper->escapeHtml(__('Clear All')) ?></span></a>
                    </div>
                <?php endif; ?>
                <?php foreach ($block->getFilters() as $filter): ?>
                    <?php if ($filter->getItemsCount()): ?>
                        <div class="block w-full border-b border-gray-200" x-data="{isOpened: false}">
                            <button role="button" @click="isOpened=!isOpened" type="button" class="pb-4 filter-options-title w-full text-left flex justify-between items-center gap-x-2 font-medium">
                                <span>
                                    <?= $escaper->escapeHtml(__($filter->getName())) ?>
                                </span>
                                <span class="inline-block">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="transition-transform transform duration-300 ease-in-out rotate-0" :class="{ 'rotate-180': isOpened }" width="20" height="20" aria-hidden="true" focusable="false">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"></path>
                                    </svg>
                                </span>
                            </button>
                            <div class="filter-options-content pb-5" x-cloak x-show="isOpened">
                                <?= /* @noEscape */ $block->getChildBlock('renderer')->render($filter) ?>
                            </div>
                        </div>
                    <?php endif; ?>
                <?php endforeach; ?>
            </div>
        </div>
    </div>
	<script>
	    'use strict';
       (function( vira, undefined ) {
		const formatStr = function (str, nStart) {
            const args = Array.from(arguments).slice(2);

            return str.replace(/(%+)([0-9]+)/g, (m, p, n) => {
                const idx = parseInt(n) - nStart;

                if (args[idx] === null || args[idx] === void 0) {
                    return m;
                }
                return p.length % 2
                    ? p.slice(0, -1).replace('%%', '%') + args[idx]
                    : p.replace('%%', '%') + n;
            })
        }
		vira.str = function (string) {
            const args = Array.from(arguments);
            args.splice(1, 0, 1);

            return formatStr.apply(undefined, args);
        }
		}( window.vira = window.vira || {} ));
	</script>
<?php endif; ?>
